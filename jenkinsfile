#! groovy


def mainPath = "terraform"

pipeline {
agent any
//{
//    label 'linux'
// kubernetes{
// defaultContainer 'aws'
// yaml '''apiVersion: v1
// kind: Pod
// metadata:
//     labels:
//         app: agent
// spec:
//     containers:
//     -   name: aws
//         image: blablablabla
//         command:
//         - cat
//         tty: true
// '''
// }
//}

       options {
         skipDefaultCheckout(true)
         buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '60'))
       }
       parameters {
 	        booleanParam(defaultValue: false, description: 'Check if Terraform Apply to be executed', name: 'Continue_To_Terraform_Apply')
       }
       environment {
         Continue_To_Terraform_Apply = 'true'
       }
      
      stages {
stage('Checkout') {
    steps {
        script {
        def gitCheckout = checkout ([
         $class: 'GitSCM',
         branches: [[name: "main"]],
         doGenerateSubmoduleConfigurations: false,
         extensions: [],
         subModuleCfg: [],
         userRemoteConfigs: [[
            credentialsId: 'jenkins_office',
            url: "https://github.com/NSaiNagendra/githubactionspoc.git"
         ]]
])
}
       }
}

        stage ("ZIP - Lambda Code") {
            steps{
                dir("$mainPath") {
                    script{
                        sh """
                            set +x
				            if [ -d "lambda_functionss"]; then
                            cd lambda_functions
                            pwd
                            for d in *; do
                                (cd "\$d" && pip install –r requirements.txt -t ./ && zip –r ../\$d.zip *); done
                            ls –ltr
                            else 
                                echo “No Lambda Functions to zip or Please place the Lambda Functions inside 				     terraform/lambda_functions if any”
                            fi
                            """
                        }
                    }
            }
        }
        stage ("Update Secret Key") {
            steps{
            dir("$mainPath") {
                script{
               withCredentials([string(credentialsId: 'secretKey', variable: 'SecretKey')]) {
   		sh "sed -i 's/SECRET_ACCESS_KEY/${SecretKey}/g' main.tf"
		sh "cat main.tf"
}
                }
            }
        }
    }
        stage ("Dev TF Init") {
            steps{
                dir("$mainPath") {
      	        script{
		withCredentials([usernamePassword(credentialsId: "svs-devops", passwordVariable: "bidevopspw", usernameVariable: "bidevopsun")]) {
		sh  '''
		terraform init -backend-config="access_key=${bidevopsun}" -backend-config="secret_key=${bidevopspw}" 
		'''
				}               		
		                }
		            }
        }
    }
        stage ("Dev TF Plan") {
            steps{
            dir("$mainPath") {
                script{
                sh "terraform plan -out=firstplan"
                }
            }
        }
    }
        stage ("Dev TF Apply") {
            steps{
            dir("$mainPath") {
                script{
                if (!params.Continue_to_Terraform_Apply){
        	    echo "Continue_to_Terraform_Apply flag detected as false. Skipping rest of Pipeline."
                } else {
                    sh "terraform apply -auto-approve firstplan"
                }
            }
        }
    }
}
}
}
